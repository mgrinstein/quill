./claude.py
from anthropic import Anthropic, HUMAN_PROMPT, AI_PROMPT
import os
from dotenv import load_dotenv

def call_claude(prompt):
        
    load_dotenv() # looks for .env file
    api_key = os.environ.get("ANTHROPIC_API_KEY")

    anthropic = Anthropic(
        # defaults to os.environ.get("ANTHROPIC_API_KEY")
        api_key = api_key,
    )

    completion = anthropic.completions.create(
        model="claude-2",
        max_tokens_to_sample=300,
        prompt=prompt,
    )
    return completion.completion

def main():
    prompt = f"{HUMAN_PROMPT} how does a court case get to the Supreme Court?{AI_PROMPT}"
    print(call_claude(prompt))


if __name__ == "__main__":
    main()

./read_dir.py
# File that prints the contents of all text files in a given directory
# including subdirectories.
# Usage: python read_dir.py <directory>
# Example: python read_dir.py /home/username/Documents

import os
import sys


def read_dir(directory, output_file=""):
    if output_file != "":
        f = open(output_file, 'w')
    else:
        f = None

    for root, dirs, files in os.walk(directory):
        for file in files:
            if file.endswith('.py'):
                read_file(os.path.join(root, file), f)

    if f is not None:
        f.close()


def read_file(file_path, f=None):
    if f is None:
        print(file_path)
    else:
        f.write(file_path + '\n')

    with open(file_path, 'r') as g:
        if f is None:
            print(g.read())
        else:
            f.write(g.read() + '\n')


if __name__ == '__main__':
    output_file = "test.txt"
    read_dir(sys.argv[1], output_file)

./main.py
import sys

from anthropic import HUMAN_PROMPT, AI_PROMPT

from claude import call_claude
from read_dir import read_dir

PROMPT_START = "{HUMAN_PROMPT} Resume the following repository: \n"
PROMPT_END = "{AI_PROMPT}"
OUTPUT_FILE = "temp.txt"

def main(dir_path):
    read_dir(".", OUTPUT_FILE)
    with open(OUTPUT_FILE, 'r') as f:
        prompt = PROMPT_START + f.read() + PROMPT_END

    print(call_claude(prompt))


if __name__ == "__main__":
    main(sys.argv[1])

