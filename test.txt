../avai/manage.py
#!/usr/bin/env python
import os
import sys

if __name__ == "__main__":
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "avai_project.settings")

    from django.core.management import execute_from_command_line

    execute_from_command_line(sys.argv)

../avai/avai_project/__init__.py

../avai/avai_project/settings.py
"""
Django settings for avai_project project.

Generated by 'django-admin startproject' using Django 2.0.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os
import django_heroku


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "CHANGE_ME!!!! (P.S. the SECRET_KEY environment variable will be used, if set, instead)."

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "avai_app",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "avai_project.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ]
        },
    }
]

WSGI_APPLICATION = "avai_project.wsgi.application"


# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE" : "django.db.backends.sqlite3",
        "NAME": os.path.join(BASE_DIR, "db.sqlite3")
    }
}

# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]


# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATIC_URL = "/static/"

django_heroku.settings(locals())

DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
AWS_STORAGE_BUCKET_NAME = 'image-playlist'
AWS_S3_REGION_NAME = 'eu-west-1'
../avai/avai_project/urls.py
from django.urls import path, include

from django.contrib import admin

admin.autodiscover()

import avai_app.views

# To add a new path, first import the app:
# import blog
#
# Then add the new path:
# path('blog/', blog.urls, name="blog")
#
# Learn more here: https://docs.djangoproject.com/en/2.1/topics/http/urls/

urlpatterns = [
    path("", avai_app.views.index, name="index"),
    #path("db/", avai_app.views.db, name="db"),
    path("admin/", admin.site.urls),
    path("detect/", avai_app.views.detect, name="detect"),
    #path("results/", avai_app.views.results, name="results"),
]

../avai/avai_project/wsgi.py
"""
WSGI config for avai_project project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/howto/deployment/wsgi/
"""

import os

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "avai_project.settings")

from django.core.wsgi import get_wsgi_application

application = get_wsgi_application()

../avai/avai_app/image_labeler.py
import boto3

BUCKET = "image-playlist"
KEY = "dog.jpg"
MAX_LABELS = 10
MIN_CONFIDENCE = 90
REGION = "eu-west-1"

class ImageLabeler:
    def __init__(
        self,
        bucket=BUCKET,
        max_labels=MAX_LABELS,
        min_confidence=MIN_CONFIDENCE,
        region=REGION
    ):

        self.bucket = bucket
        self.max_labels = max_labels
        self.min_confidence = min_confidence

        self.rekognition = boto3.client("rekognition", region)

    def detect(self, file_name_in_bucket):
        response = self.rekognition.detect_labels(
            Image={
                "S3Object": {
                    "Bucket": self.bucket,
                    "Name": file_name_in_bucket,
                }
            },
            MaxLabels=self.max_labels,
            MinConfidence=self.min_confidence,
        )
        return parse_response(response)


def parse_response(response):
    return [
        {
            "label": d["Name"],
            "confidence": int(d["Confidence"])
        }
        for d in response["Labels"]
    ]


def detect_image_labels(file_name_in_bucket):
    labeler = ImageLabeler()
    return labeler.detect(file_name_in_bucket)

../avai/avai_app/models.py
from django.db import models
import uuid

# Create your models here.

class Greeting(models.Model):
    when = models.DateTimeField("date created", auto_now_add=True)

class Photo(models.Model):
    uuid = models.UUIDField(
        primary_key=True, default=uuid.uuid4, editable=False,
    )
    created_at = models.DateTimeField(auto_now_add=True) 
    photo = models.ImageField()
    label = models.CharField(max_length=30)
../avai/avai_app/playlist_recommender.py
import boto3
import pandas as pd
from io import StringIO

from django.conf import settings
from django.conf.urls.static import static

PLAYLIST_PATH = static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)

class PlaylistRecommender:
    def __init__(self):
        s3 = boto3.client("s3", settings.AWS_S3_REGION_NAME)
        
        # get a handle on the object you want (i.e. your file)
        obj = s3.get_object(Key='label_to_song.csv',
                            Bucket=settings.AWS_STORAGE_BUCKET_NAME)
        csv_text = obj['Body'].read().decode('utf-8')
        self.playlist = pd.read_csv(StringIO(csv_text))

    def recommend(self, labels):
        known_labels = [
            d for d in labels
            if d["label"] in list(self.playlist["[en]"])
        ]

        if known_labels:
            top_label = max(known_labels, key=lambda x: x["confidence"])["label"]
        else:
            top_label = 'else'
        playlist_id = self.playlist[self.playlist["[en]"] == top_label].iloc[0]["URI Filtr"]

        return playlist_id.split(":")[-1]


def recommend_playlist(labels):
    recommender = PlaylistRecommender()
    return recommender.recommend(labels)
../avai/avai_app/__init__.py

../avai/avai_app/forms.py
from django import forms
from .models import Photo

# Create the form class.
class ImageForm(forms.Form):  
    photo = forms.ImageField(label="")
../avai/avai_app/admin.py
from django.contrib import admin
from .models import Photo

admin.site.register(Photo)
../avai/avai_app/tests.py
from django.contrib.auth.models import AnonymousUser, User
from django.test import TestCase, RequestFactory

from .views import index


class SimpleTest(TestCase):
    def setUp(self):
        # Every test needs access to the request factory.
        self.factory = RequestFactory()

    def test_details(self):
        # Create an instance of a GET request.
        request = self.factory.get("/")
        request.user = AnonymousUser()

        # Test my_view() as if it were deployed at /customer/details
        response = index(request)
        self.assertEqual(response.status_code, 200)

../avai/avai_app/views.py
import os

from django.conf import settings
from django.shortcuts import render
from django.http import HttpResponse, HttpResponseRedirect

from .models import Greeting, Photo
from .forms import ImageForm
from .image_labeler import detect_image_labels
from .playlist_recommender import recommend_playlist

from uuid import uuid4


def detect(request):
    # if this is a POST request we need to process the form data
    if request.method == 'POST':
        # create a form instance and populate it with data from the request:
        form = ImageForm(request.POST, request.FILES)
        # check whether it's valid:
        if form.is_valid():
            photo = Photo(photo=form["photo"].value())
            photo.save()
            
            filename = os.path.basename(photo.photo.name)
            s3_url = "https://{}.s3-{}.amazonaws.com/{}".format(
                settings.AWS_STORAGE_BUCKET_NAME,
                settings.AWS_S3_REGION_NAME,
                filename
            )
            labels = detect_image_labels(filename)
            recommended_playlist_id = recommend_playlist(labels)
            return render(
                request,
                "results.html",
                {
                    "detection_results":{
                        "playlist_id":recommended_playlist_id,
                        "image_url": s3_url,
                        "labels": labels
                    }
                }
            )
        else:
            return render(request, "index.html", {'form': form})

def index(request):
    form = ImageForm()
    return render(request, "index.html", {'form': form})
../avai/avai_app/migrations/0002_auto_20201101_0104.py
# Generated by Django 3.0.3 on 2020-11-01 04:04

from django.db import migrations, models
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ('avai_app', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Photo',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('label', models.CharField(max_length=30)),
                ('photo', models.FileField(upload_to='')),
            ],
        ),
        migrations.AlterField(
            model_name='greeting',
            name='when',
            field=models.DateTimeField(auto_now_add=True, verbose_name='date created'),
        ),
    ]

../avai/avai_app/migrations/__init__.py

../avai/avai_app/migrations/0001_initial.py
# -*- coding: utf-8 -*-
# Generated by Django 1.9.1 on 2016-01-27 21:54
from __future__ import unicode_literals

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Greeting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('when', models.DateTimeField(auto_now_add=True, verbose_name=b'date created')),
            ],
        ),
    ]

../avai/avai_app/migrations/0003_auto_20201101_1326.py
# Generated by Django 3.0.3 on 2020-11-01 16:26

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('avai_app', '0002_auto_20201101_0104'),
    ]

    operations = [
        migrations.AlterField(
            model_name='photo',
            name='photo',
            field=models.ImageField(upload_to=''),
        ),
    ]

